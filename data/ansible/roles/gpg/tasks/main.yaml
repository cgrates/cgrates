---
# tasks file for gpg
- name: Ensure .gnupg config directory exists with right permissions
  file: 
    dest: "{{ gpg_home }}/.gnupg" 
    state: directory 
    mode: 0700 
    owner: root

- name: check existing secret key
  shell: "gpg --list-secret-keys | grep '{{ gpg_realname }}'"
  register: gpgkeys
  changed_when: false
  failed_when: false

- name: Check expired keys
  shell: "gpg --list-keys {{ gpg_realname }} | grep 'expired'"
  register: gpgExpKeys
  changed_when: false
  failed_when: false
  when:  gpgkeys.stdout_lines|length > 0

- name: Update expired
  shell: 'printf "expire\n{{ gpg_expire }}\nsave\n" | gpg --batch --command-fd 0 --status-fd=2 --edit-key {{ gpg_realname }}'
  when: gpgkeys.stdout_lines|length > 0 and gpgExpKeys.stdout_lines|length > 0

- include_tasks: gpg-gen-key.yaml
  when: gpgkeys.stdout_lines|length < 1

- name: get user armored public key
  shell: "sudo gpg --armor --output {{ gpg_pubkeyfileexport }} --export {{ gpg_useremail }}"
  when: gpgkeys.stdout_lines|length < 1 or (gpgkeys.stdout_lines|length > 0 and gpgExpKeys.stdout_lines|length > 0)

- name: After export move the key to /var/packages
  shell: "sudo mv {{ gpg_pubkeyfileexport }} /var/packages"
  when: gpgkeys.stdout_lines|length < 1 or (gpgkeys.stdout_lines|length > 0 and gpgExpKeys.stdout_lines|length > 0)
