---
- name: Install CGRateS dependencies
  become: yes
  ansible.builtin.package:
    name: "{{ cgrates_dependencies }}"
    state: present
    update_cache: yes
    cache_valid_time: 86400

- name: Create cgrates directory
  ansible.builtin.file:
    state: directory
    mode: "u=rwx,go=rx"
    owner: "{{ ansible_user }}"
    dest: "{{ cgrates_dir }}"
  when: clone_repository

- name: Git clone cgrates
  ansible.builtin.git:
    repo: https://github.com/cgrates/cgrates.git
    dest: "{{ cgrates_dir }}"
    update: yes
    force: yes
    version: "{{ git_version }}"
  when: clone_repository

- name: Build cgrates
  ansible.builtin.command:
    cmd: bash -lc "source /etc/profile.d/golang.sh && sh {{ cgrates_dir }}/build.sh"
  args:
    chdir: "{{ cgrates_dir }}"
  become_user: "{{ ansible_user }}"

- name: Create symbolic links
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  become: yes
  loop:
    - { src: "{{ cgrates_dir }}/data", dest: "/usr/share/cgrates" }
    - { src: "{{ golang_gopath }}/bin/cgr-engine", dest: "/usr/bin/cgr-engine" }

- name: Run post install scripts
  ansible.builtin.shell:
    cmd: "{{ item.cmd }}"
    chdir: "{{ cgrates_dir }}/data/storage/{{ item.db }}"
  become: yes
  loop:
    - { db: "mysql", cmd: "sh setup_ers_db.sh root CGRateS.org localhost" }
    - { db: "mysql", cmd: "sh setup_cgr_db.sh root CGRateS.org localhost" }
    - { db: "postgres", cmd: "sh create_db_with_users.sh" }
    - { db: "postgres", cmd: "sh create_ers_db.sh" }
    - { db: "mongo", cmd: "sh setup_cgr_db.sh" }

- name: Set versions
  ansible.builtin.shell:
    cmd: "cgr-migrator -exec=*set_versions -config_path=/usr/share/cgrates/conf/samples/tutmysql"
  environment:
    PATH: "{{ lookup('env','PATH') }}:{{ golang_gopath }}/bin:/usr/local/go/bin:{{ ansible_env.PATH }}"
